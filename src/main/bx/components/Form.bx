/**
 * Boxlang Component Which Generates the Form Tag
 */
@BoxComponent( 'Form' )
@AllowsBody( true )
@RequiresBody( false )
class{

	/**
	 * The Form UI component
	 *
	 * <pre>
	 * <bx:form format="html" action="http://www.google.com" method="post">...</bx:form>
	 * </pre>
	 *
	 * @param context The context of the execution (IBoxContext)
	 * @param attributes The attributes of the component that were passed in
	 * @param body The body of the component that you can pass to `processBody(context, body, [buffer])` for execution and buffer retreival
	 * @param executionState The execution state of the component. Each component get's one as an isolated state.
	 *
	 * @return A BodyResult instance or null for a default result return.
	 */
	function invoke( required context, Struct attributes, any body, Struct executionState ){
		var requestContext = context.getRequestContext();
		if( !isNull( atrributes.format ) && lcase( attributes.format ) != "html" ){
			throw(
				type		= "boxlang.forms.InvalidFormFormatException",
				message		= "The format #attributes.format# is not valid for the Form component"
			);
		}

		var nonHTMLAttributes = [ "format", "passthrough", "scriptsrc", "preservedata" ];
		var unsupportedAttributes = [ "enablecab", "skin", "preloader", "timeout", "wmode", "accessible", "archive", "codebase" ];

		// TODO: Should we add our own ID to the forms if not supplied and ajax functionality is enabled?
		// param attributes.id = listLast( lcase( createUUID() ), "-" );

		unsupportedAttributes.each( ( key ) => {
			if( !isNull( attributes[ key ] ) ){
				BoxAnnounce(
					"LogMessage",
					{
						"text" : "The attribute #key# is not supported by the Form component.  This attribute will be ignored.",
						"level" : "WARN"
					}
				);
			}
		} );

		var tagContent = "<form";

		attributes.filter( ( key, value ) => !isNull( value ) && !nonHTMLAttributes.contains( key ) && !unsupportedAttributes.contains( key ) ).each( ( key, value ) => {
			tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
		} );

		if( !isNull( attributes.passthrough ) ){
			if( isStruct( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
				} );
			} else if( isArray ( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #value#";
				} );
			}
			else{
				tagContent &= " #attributes.passthrough#";
			}
		}

		// TODO: Handle only bringing in the script and css once via a request variable
		if( !isNull( attributes.scriptsrc ) ){
			context.writeToBuffer( "<script type=""application/javascript"" src=""#attributes.scriptsrc#""></script>" );
		}

		context.writeToBuffer( tagContent & ">" );

		// A buffer to capture the body output
		var buffer		= newBuffer();
		var	bodyResult	= processBody( context, body, buffer );

		var formContents	= buffer.toString();

		context.writeToBuffer( formContents );

		context.writeToBuffer( "</form>" );

	}

}
