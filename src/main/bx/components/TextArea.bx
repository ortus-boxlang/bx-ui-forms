/**
 * Boxlang Component Which Generates the Form Tag
 */
@BoxComponent( Textarea )
@AllowsBody( true )
@RequiresBody( false )
class{

	/**
	 * Boxlang Component Which Generates the Textarea Tag
	 *
	 * <pre>
	 * <bx:textarea name="myTextarea">This is my text</bx:textarea>
	 * </pre>
	 *
	 * @param context The context of the execution (IBoxContext)
	 * @param attributes The attributes of the component that were passed in
	 * @param body The body of the component that you can pass to `processBody(context, body, [buffer])` for execution and buffer retreival
	 * @param executionState The execution state of the component. Each component get's one as an isolated state.
	 *
	 * @return A BodyResult instance or null for a default result return.
	 */
	function invoke( required context, Struct attributes, any body, Struct executionState ){

		if( isNull( attributes.name ) ){
			throw(
				type		= "boxlang.forms.MissingAttributeException",
				message		= "The name attribute is required for the Input component"
			);
		}

		var nonHTMLAttributes = [ "sourcefortooltip", "validateat", "range", "validate", "bind", "bindattribute", "bindonload", "onvalidate" ];
		var conditionalAtrributes = [ "disabled", "autofocus" ];
		var evaluativeAttributes = [ "label", "message", "passthrough" ];
		var unsupportedAttributes = [ "stylesXML", "templatesXML", "richtext", "toolbar", "toolbarOnFocus" ];
		var promotedAttributes = [ "datasrc", "dataformatas", "dir", "lang" ]

		var isHTMLAttribute = ( key ) => !nonHTMLAttributes.contains( key ) && !conditionalAtrributes.contains( key ) && !evaluativeAttributes.contains( key ) && !unsupportedAttributes.contains( key ) && !promotedAttributes.contains( key );

		// A buffer to capture the body output
		var buffer		= newBuffer();

		if( !isNull( attributes.bind ) ){

		}
		var	bodyResult	= processBody( context, body, buffer );

		// If there was a return statement inside our body, we early exit now
		if ( bodyResult.isEarlyExit() ) {
			return bodyResult;
		}

		// reverse the buffer contents and place into a string
		var tagBodyContent	= buffer.toString();

		var tagContent = "<textarea";
		// param attributes.id = listLast( lcase( createUUID() ), "-" );

		attributes.filter( ( key ) => isHTMLAttribute( key ) ).each( ( key, value ) => {
			tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
		} );

		if( !isNull( attributes.passthrough ) ){
			if( isStruct( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
				} );
			} else if( isArray ( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #value#";
				} );
			}
			else{
				tagContent &= " #attributes.passthrough#";
			}
		}

		if( !isNull( attributes.enabled ) && !attributes.enabled ){
			attributes.disabled = true;
		}

		conditionalAtrributes.each( ( key ) => {
			if( !isNull( attributes[ key ] ) && attributes[ key ] ){
				tagContent &= " #key#";
			}
		} );


		if( !isNull( attributes.sourcefortooltip ) ){
			tagContext &= " tooltip data-tooltip-source=""#encodeForHTMLAttribute( attributes.sourcefortooltip )#""";
		} else if( !isNull( attributes.title ) ){
			tagContext &= " tooltip";
		}

		if( !isNull( attributes.message ) ){
			tagContent &= " data-validation-message=""#encodeForHTMLAttribute( attributes.message )#""";
		}

		tagContent &= ">";

		tagContent &= tagBodyContent;


		tagContent &= "</textarea>";

		if( !isNull( attributes.label ) ){
			tagContent = "<label for=""#attributes.id#"">#attributes.label#</label>" & tagContent;
		}

		context.writeToBuffer( tagContent );
	}

}
