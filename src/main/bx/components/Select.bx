/**
 * Boxlang Component Which Generates the Form Tag
 */

 import java:ortus.boxlang.runtime.dynamic.ExpressionInterpreter as interpreter;

@BoxComponent( Select )
@AllowsBody( true )
@RequiresBody( false )
class{

	/**
	 * This component provides the Select tag for the form
	 *
	 * <pre>
	 * <bx:select query="cities" group="state" value="abbreviation" display="name" queryposition="after">
	 *     <option value="">Select a City</option>
	 * </bx:select>
	 * </pre>
	 *
	 * @param context The context of the execution (IBoxContext)
	 * @param attributes The attributes of the component that were passed in
	 * @param body The body of the component that you can pass to `processBody(context, body, [buffer])` for execution and buffer retreival
	 * @param executionState The execution state of the component. Each component get's one as an isolated state.
	 *
	 * @return A BodyResult instance or null for a default result return.
	 */
	function invoke( required context, Struct attributes, any body, Struct executionState ){

		if( isNull( attributes.name ) ){
			throw(
				type		= "boxlang.forms.MissingAttributeException",
				message		= "The name attribute is required for the Input component"
			);
		}

		var nonHTMLAttributes = [ "casesenstive", "query", "group", "queryposition", "tooltip", "visible", "editable" ];
		var conditionalAtrributes = [ "disabled", "autofocus", "ondblclick" ];
		var evaluativeAttributes = [ "label", "selected", "enabled", "passthrough" ];
		var promotedAttributes = [ "datasrc", "dataformatas", "dir", "lang" ]

		var isHTMLAttribute = ( key ) => !nonHTMLAttributes.contains( key ) && !conditionalAtrributes.contains( key ) && !evaluativeAttributes.contains( key ) && !promotedAttributes.contains( key );

		// A buffer to capture the body output
		var buffer		= newBuffer();
		var	bodyResult	= processBody( context, body, buffer );

		// If there was a return statement inside our body, we early exit now
		if ( bodyResult.isEarlyExit() ) {
			return bodyResult;
		}

		// reverse the buffer contents and place into a string
		var tagBodyContent	= buffer.toString();

		var tagContent = "<select";

		attributes.filter( ( key ) => isHTMLAttribute( key ) ).each( ( key, value ) => {
			tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
		} );

		if( !isNull( attributes.passthrough ) ){
			if( isStruct( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
				} );
			} else if( isArray ( attributes.passthrough ) ){
				attributes.passthrough.each( ( key, value ) => {
					tagContent &= " #value#";
				} );
			}
			else{
				tagContent &= " #attributes.passthrough#";
			}
		}

		if( !isNull( attributes.enabled ) && !attributes.enabled ){
			attributes.disabled = true;
		}

		conditionalAtrributes.each( ( key ) => {
			if( !isNull( attributes[ key ] ) && attributes[ key ] ){
				tagContent &= " #key#";
			}
		} );


		if( !isNull( attributes.sourcefortooltip ) ){
			tagContext &= " tooltip data-tooltip-source=""#encodeForHTMLAttribute( attributes.sourcefortooltip )#""";
		} else if( !isNull( attributes.title ) ){
			tagContext &= " tooltip";
		}

		if( !isNull( attributes.message ) ){
			tagContent &= " data-validation-message=""#encodeForHTMLAttribute( attributes.message )#""";
		}

		tagContent &= ">";

		if( !isNull( attributes.query ) ){
			if( !isNull( attributes.queryPosition ) && attributes.queryPosition == "below" ){
				tagContent &= tagBodyContent;
			}
			var optionsQuery = isSimplevalue( attributes.query )
				? interpreter.getVariable( context, attributes.query, true )
				: attributes.query;

			if( !isQuery( optionsQuery ) ){
				throw(
					type		= "boxlang.forms.InvalidQueryException",
					message		= "The query attribute must be a query object or the name of a query in the current context"
				);
			}

			// Grouping directive
			if( !isNull( attributes.group ) ){
				if( isNull( attributes.value ) ){
					throw(
						type		= "boxlang.forms.MissingAttributeException",
						message		= "The value attribute is required when using the group attribute"
					);
				}
				var optionGroups = optionsQuery.reduce( ( result, row ) => {
					var rowGroup = row[ attributes.group ];
					if( !result.keyExists( rowGroup) ){
						result[ rowGroup ] = [];
					}
					var optionValue = row[ attributes.value ];
					var optionDisplay = !isNull( attributes.display ) ? row[ attributes.display ] : optionValue;

					result[ rowGroup ].append( {
						"label" : optionDisplay,
						"value" : optionValue,
						"selected" : !isNull( attributes.selected ) ? ( optionValue == attributes.selected ) : false
					} );

					return result;

				}, {} );


				for( var group in optionGroups ){
					tagContent &= char( 13 ) & "<optgroup label=""#group#"">";
					optionGroups[ group ].each( ( option ) => {
						tagContent &= char( 13 ) & "<option value=""#option.value#"" #( option.selected ? "selected" : "" )#>#option.label#</option>";
					} );
					tagContent &= char( 13 ) & "</optgroup>";
				}

			} else {
				var firstColumnName = optionsQuery.getColumnArray().first();
				optionsQuery.each( ( row ) => {
					var optionValue = !isNull( attributes.value ) ? row[ attributes.value ] : row[ firstColumnName ];
					var optionDisplay = !isNull( attributes.display ) ? row[ attributes.display ] : optionValue;
					var selected = !isNull( attributes.selected ) ? ( optionValue == attributes.selected ) : false;
					tagContent &=  char( 13 ) & "<option value=""#optionValue#"" #( selected ? "selected" : "" )#>#optionDisplay#</option>";
				} );
			}

			if( isNull( attributes.queryPosition ) || attributes.queryPosition == "above" ){
				tagContent &= tagBodyContent;
			}

		} else {
			tagContent &= tagBodyContent;
		}


		tagContent &= " </select>";

		if( !isNull( attributes.label ) ){
			tagContent = "<label for=""#attributes.id#"">#attributes.label#</label>" & tagContent;
		}

		context.writeToBuffer( tagContent );
	}

}
